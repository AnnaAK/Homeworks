цель: складывать числа произвольной длины
 1 2 3 [3,2,1,0,0...0]      11123 [1123,1,0...0]
 +
 4 5 6 [6,5,4,0...0]        22456 [2456,2,0...0]
 храним список цифр и знаков
 struct longNum {
 int sign;
 typedef intlist digits
 }
 
 
 1
 |3| |->|2| |->|1| |
 123=11111011(2)
 
 сложение
 longNum longNum_Add (longNum x, LongNum y)
 sub(x,y)
 return longNum_Add(x,longNum_Neg(longNum x)
 x. sign = 1-x sign;
 return x;
 
 
 if (x. sign == y. sign)
 {
 longNum z
 z.sign = x.sign
 return z;
 z.digits = list_make() */создает новый пустой лист */
 при сложении двух разноразрядных
 должен быть лист переноса
 сделать длину наменьшего равной длине наибольшего
 смотрим текущая из первого листа, текущая из второго
 в результирующий список первый+второй
 когда закончился наиболее короткий список работаем там же, но есть предварительная проверка
 curru git1 = curru curr1.val.0 ПРОЧИТАТЬ В ИНТЕРНЕТЕ 
 while (curr1||curr2){
 
 
 
 }
 
 вычитание
 определяем какой больший по модулю
 если длины равны и первые совпадают. то их можно отбросить
 выполняем вычитание
 
 
 
 
 
 
 
 
 struct intlist{
 
 size_t count; */size_t люб;й допустимый размер */
 intNode* head;
 }
 struct intNode{
 int val;
 intNode* next;
 }
 
 
 разбиение проекта в языке си
 
////отступление////
|c;h|
  | compiler
|obj|
  | linker
|program.exe|

#include<> - искать в стандарте
#include"" - искать в папке с проектом

///конец отступления///



void fan1(); */пустое объявление */
main (){
fan1();
}
fan1(); */основное тело */


 
 
 }
